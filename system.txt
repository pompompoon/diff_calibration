G:\共有ドライブ\GAP_長寿研\user\iwamoto\視線の動きの俊敏さ

conda activate new_base_env

視線の動きの俊敏さ/
├── data/                                      # 元データ保存ディレクトリ
├── feature_generation/                        # 特徴量生成モジュール
│   ├── extractioncondition/                   # データ抽出条件の定義
│   │   ├── __pycache__/
│   │   │   └── sensitivityfilter.cpython-312.pyc
│   │   └── sensitivityfilter.py               # 感度フィルターの実装
│   └── fdata/                                 # 特徴量生成後データ
│       ├── All_EyeCenterAngle_all.py
│       ├── EyeCenterAngle_all.py
│       ├── MainEyecenter_saccade_angleV.py
│       ├── MainEyeCenterAngle_Eyestd.py
│       ├── MainEyeCenterAngle_Nosaccade.py
│       ├── MainEyeCenterAngle.py
│       ├── microsaccade_EyeCenterAngle_all.py
│       ├── saccade_EyeCenterAngle_-5s.py
│       ├── saccade_EyeCenterAngle_all.py
│       ├── saccade_RotatedEyeCenter_all - コピー.py
│       ├── saccade_RotatedEyeCenter_all.py
│       └── saccade_velo.py
├── models/                                    # 実装したアルゴリズム等
│   ├── __pycache__/
│   ├── __init__.py
│   ├── RegressionResultManager.py             # 回帰モデル評価管理クラス
│   ├── base_model.py                          # 基本モデルクラス
│   ├── catboost_model.py                      # CatBoostモデル実装
│   ├── cross_validator - コピー.py
│   ├── cross_validator.py                     # 交差検証実装
│   ├── lightgbm_model.py                      # LightGBMモデル実装
│   ├── partial_dependence_plotter.py          # 部分依存プロット生成（分類用）
│   ├── partial_dependence_plotter_kaiki.py    # 部分依存プロット生成（回帰用）
│   ├── random_forest_model.py                 # ランダムフォレストモデル実装
│   ├── undersampling_bagging_model.py         # アンダーサンプリングバギングモデル実装
│   ├── xgboost_model.py                       # XGBoostモデル実装
│   └── new_pdp/                               # 新しい部分依存プロット関連
├── pretreatment/                              # 前処理ツール
│   ├── cluster_features.png                   # クラスタリング特徴量の可視化
│   ├── elbow_method.png                       # エルボー法の可視化
│   ├── join.ipynb                             # データ結合用ノートブック
│   ├── kmeans_clusters.png                    # k-meansクラスタリングの可視化
│   └── umap.ipynb                             # UMAP次元削減用ノートブック
├── result/                                    # モデルを実行した後の結果
├── saccade_features/                          # サッケード特徴量関連
├── visualization/                             # 可視化モジュール
│   ├── eye_tracking_visualizer.py             # 視線データ可視化クラス（分類用）
│   ├── regression_visualizer.py               # 回帰結果可視化クラス
│   └── threshold_evaluator.py                 # 閾値評価クラス
├── main5_kaiki.py                              # メイン実行コード（回帰）
├── main5.py                                   # メイン分類コード
                             


■main.py

PS G:\共有ドライブ\GAP_長寿研\user\iwamoto\視線の動きの俊敏さ> python main.py --help
usage: main.py [-h] [--cv] [--smote] [--no-smote] [--splits SPLITS] [--model {lightgbm,xgboost,random_forest}]
               [--random-state RANDOM_STATE] [--data-path DATA_PATH] [--data-file DATA_FILE] [--output-dir OUTPUT_DIR]

options:
  -h, --help            show this help message and exit
  --cv                  交差検証を実行する
  --smote               SMOTEを使用する
  --no-smote            SMOTEを使用しない
  --splits SPLITS       交差検証の分割数
  --model {lightgbm,xgboost,random_forest}
                        使用するモデル
  --random-state RANDOM_STATE
                        乱数シード
  --data-path DATA_PATH
                        データファイルのパス
  --data-file DATA_FILE
                        データファイル名
  --output-dir OUTPUT_DIR
                        結果出力ディレクトリ

■main_2pdp.py
usage: main_2pdp.py [-h] [--cv] [--smote] [--no-smote] [--splits SPLITS] [--model {lightgbm,xgboost,random_forest,catboost}]
                    [--random-state RANDOM_STATE] [--data-path DATA_PATH] [--data-file DATA_FILE] [--output-dir OUTPUT_DIR]    
                    [--no-pdp] [--no-save]
options:
  -h, --help            show this help message and exit
  --cv                  交差検証を実行する
  --smote               SMOTEを使用する
  --no-smote            SMOTEを使用しない
  --splits SPLITS       交差検証の分割数
  --model {lightgbm,xgboost,random_forest,catboost}
                        使用するモデル
  --random-state RANDOM_STATE
                        乱数シード
  --data-path DATA_PATH
                        データファイルのパス
  --data-file DATA_FILE
                        データファイル名
  --output-dir OUTPUT_DIR
                        結果出力ディレクトリ
  --no-pdp              部分依存グラフを作成しない
  --no-save             プロットをファイルに保存しない


■main_3pdp.py

PS G:\共有ドライブ\GAP_長寿研\user\iwamoto\視線の動きの俊敏さ> python main_3pdp.py --help
usage: main_3pdp.py [-h] [--cv] [--smote] [--no-smote] [--undersampling]
                    [--base-model {lightgbm,xgboost,random_forest,catboost}] [--n-bags N_BAGS] [--splits SPLITS]
                    [--model {lightgbm,xgboost,random_forest,catboost}] [--random-state RANDOM_STATE] [--data-path DATA_PATH]  
                    [--data-file DATA_FILE] [--output-dir OUTPUT_DIR] [--no-pdp] [--no-save]

options:
-h, --help            show this help message and exit
  --cv                  交差検証を実行する
  --smote               SMOTEを使用する
  --no-smote            SMOTEを使用しない
  --undersampling       UndersamplingBaggingを使用する
  --base-model {lightgbm,xgboost,random_forest,catboost}
                        UndersamplingBaggingで使用するベースモデル
  --n-bags N_BAGS       UndersamplingBaggingのバッグ数
  --splits SPLITS       交差検証の分割数
  --model {lightgbm,xgboost,random_forest,catboost}
                        使用するモデル
  --random-state RANDOM_STATE
                        乱数シード
  --data-path DATA_PATH
                        データファイルのパス
  --data-file DATA_FILE
                        データファイル名
  --output-dir OUTPUT_DIR
                        結果出力ディレクトリ
  --no-pdp              部分依存グラフを作成しない
  --no-save             プロットをファイルに保存しない


■main.4pdp.py
usage: main_4pdp.py [-h] [--cv] [--smote] [--no-smote] [--undersampling]
                    [--base-model {lightgbm,xgboost,random_forest,catboost}] [--n-bags N_BAGS] [--splits SPLITS]
                    [--model {lightgbm,xgboost,random_forest,catboost}] [--random-state RANDOM_STATE] [--data-path DATA_PATH]  
                    [--data-file DATA_FILE] [--output-dir OUTPUT_DIR] [--viz-only] [--no-pdp] [--no-save]

視線追跡データを用いた機械学習モデルの実行

options:
  -h, --help            show this help message and exit
  --cv                  交差検証を実行する
  --smote               SMOTEを使用する
  --no-smote            SMOTEを使用しない
  --undersampling       UndersamplingBaggingを使用する
  --base-model {lightgbm,xgboost,random_forest,catboost}
                        UndersamplingBaggingで使用するベースモデル
  --n-bags N_BAGS       UndersamplingBaggingのバッグ数
  --splits SPLITS       交差検証の分割数
  --model {lightgbm,xgboost,random_forest,catboost}
                        使用するモデル
  --random-state RANDOM_STATE
                        乱数シード
  --data-path DATA_PATH
                        データファイルのパス
  --data-file DATA_FILE
                        データファイル名
  --output-dir OUTPUT_DIR
                        結果出力ディレクトリ
  --viz-only            可視化のみを実行（学習なし）
  --no-pdp              部分依存グラフを作成しない
  --no-save             プロットをファイルに保存しない


■main5.py
new_base_env) PS G:\共有ドライブ\GAP_長寿研\user\iwamoto\視線の動きの俊敏さ> python main5.py -h                  
usage: main5.py [-h] [--cv] [--smote] [--no-smote] [--undersampling] [--simple-undersampling]
                [--base-model {lightgbm,xgboost,random_forest,catboost}] [--n-bags N_BAGS] [--splits SPLITS]
                [--model {lightgbm,xgboost,random_forest,catboost}] [--random-state RANDOM_STATE] [--data-path DATA_PATH]
                [--data-file DATA_FILE] [--output-dir OUTPUT_DIR] [--viz-only] [--no-pdp] [--no-save] [--no-organize]

視線追跡データを用いた機械学習モデルの実行

options:
  -h, --help            show this help message and exit
  --cv                  交差検証を実行する
  --smote               SMOTEを使用する
  --no-smote            SMOTEを使用しない
  --undersampling       UndersamplingBaggingを使用する
  --simple-undersampling
                        シンプルなアンダーサンプリング（バギングなし）を使用する
  --base-model {lightgbm,xgboost,random_forest,catboost}
                        UndersamplingBaggingで使用するベースモデル
  --n-bags N_BAGS       UndersamplingBaggingのバッグ数
  --splits SPLITS       交差検証の分割数
  --model {lightgbm,xgboost,random_forest,catboost}
                        使用するモデル
  --random-state RANDOM_STATE
                        乱数シード
  --data-path DATA_PATH
                        データファイルのパス
  --data-file DATA_FILE
                        データファイル名
  --output-dir OUTPUT_DIR
                        結果出力ディレクトリ
  --viz-only            可視化のみを実行（学習なし）
  --no-pdp              部分依存グラフを作成しない
  --no-save             プロットをファイルに保存しない
  --no-organize         結果ファイルを整理しない

■main5_kaikismosei2.py
　　　  　　　　　　　　　　 [-h] [--cv] [--bagging] [--base-model {lightgbm,xgboost,random_forest,catboost}]
                             [--n-bags N_BAGS] [--splits SPLITS] [--model {lightgbm,xgboost,random_forest,catboost}]
                             [--random-state RANDOM_STATE] [--data-path DATA_PATH] [--data-file DATA_FILE]
                             [--target-column TARGET_COLUMN] [--output-dir OUTPUT_DIR] [--no-save] [--no-organize] [--smote]
                             [--smote-method {binning,density,outliers}] [--smote-k-neighbors SMOTE_K_NEIGHBORS]
                             [--smote-n-bins SMOTE_N_BINS] [--smote-density-threshold SMOTE_DENSITY_THRESHOLD]
                             [--smote-outlier-threshold SMOTE_OUTLIER_THRESHOLD] [--integer-smote] [--target-min TARGET_MIN]
                             [--target-max TARGET_MAX] [--no-pdp] [--pdp-n-features PDP_N_FEATURES]
                             [--pdp-grid-resolution PDP_GRID_RESOLUTION] [--pdp-interaction] [--smote-viz-comprehensive]
                             [--smote-viz-pdp-features SMOTE_VIZ_PDP_FEATURES] [--no-smote-viz]





python main_3pdp.py --data-path　"G:\共有ドライブ\GAP_長寿研\user\iwamoto\視線の動きの俊敏さ\data\　-data-jcombined_EyeCenterAngle_saccade_analysis_sens15_vel0_excl5s_noage.csv" --model lightgbm


# lightbgm、SMOTEなし、5分割交差検証
python main_2pdp.py --model lightgbm --pdp

"G:\共有ドライブ\GAP_長寿研\user\iwamoto\視線の動きの俊敏さ\data\jcombined_EyeCenterAngle_saccade_analysis_sens15_vel0_excl5s_noage.csv"

※アンダーサンプリング＋バギングの組み合わせで部分依存グラフは出力できない

# CatBoostを使用して単一モデルによる分析
python main_3pdp.py --model catboost
で
# UndersamplingBaggingModelを使用（LightGBMをベースとして）
python main_pdp5.py --undersampling --base-model lightgbm

#simple-undersampling
python main5.py --simple-undersampling --model catboost


python main_pdp3.py --model lightgbm


# UndersamplingBaggingModelでCatBoostをベースに使用し、交差検証を実行
python main5.py --undersampling --base-model catboost 

# SMOTEも併用
python main5.py --model catboost --smote

python main5.py --undersampling --base-model lightgbm


 python　main_4pdp.py --model catboost

python　main_4pdp.py --model lightgbm


conda deactivate

conda create -n py310 python=3.10
conda activate py310
python --version

# 
python main_pdp5.py --model lightgbm --data-path G:/共有ドライブ/GAP_長寿研/user/iwamoto/視線の動きの俊敏さ/data/features_train.csv --output-dir result


python prediction.py --data-path 新しいデータのパス.csv --model-path 保存したモデルのディレクトリパス --output-path 予測結果の出力パス.csv



# SMOTEメソッドを指定
python main5_kaikidev.py --model catboost --smote --smote-method binning

# SMOTE K-neighborsを設定
python main5_kaikidev.py --model catboost --smote --smote-k-neighbors 7

# SMOTE可視化
python main5_kaikidev.py --model catboost --smote --smote-viz-comprehensive


□回帰の	smoteaバージョン
小数

python main5_kaikismo.py
models.regression_smotebackup

整数

python main5_kaikismosei.py
models.regression_smote


バランス
--smote-method density --smote-k-neighbors 5 --smote-density-threshold 0.3



異常検知
--smote-method outliers --smote-k-neighbors 5 --smote-outlier-threshold 0.15





